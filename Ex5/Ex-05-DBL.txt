SQL> @"E:\Sem 3 Lab\DBL\Ex5\Ex-05-DBL.sql"
SQL> SET SERVEROUTPUT ON;
SQL> SET ECHO ON;
SQL> 
SQL> REM  Check whether the given pizza type is available. If available display its
SQL> REM unit price. If not, display "The pizza is not available / Invalid pizza type".
SQL> 
SQL> DECLARE
  2    input_pizza_type VARCHAR2(50) := '&type';
  3    unit_price NUMBER;
  4  
  5  BEGIN
  6    SELECT unit_price INTO unit_price FROM PIZZA
  7    WHERE pizza_type=input_pizza_type;
  8  
  9    DBMS_OUTPUT.PUT_LINE('Pizza is avilable and its unit price is '||unit_price);
 10  
 11  EXCEPTION
 12    WHEN NO_DATA_FOUND THEN
 13  	 DBMS_OUTPUT.PUT_LINE('Pizza type not available');
 14  
 15  END;
 16  /
Enter value for type: pan
old   2:   input_pizza_type VARCHAR2(50) := '&type';
new   2:   input_pizza_type VARCHAR2(50) := 'pan';
Pizza is avilable and its unit price is 130                                     

PL/SQL procedure successfully completed.

SQL> 
SQL> REM For the given customer name and a range of order date, find whether a
SQL> REM customer had placed any order, if so display the number of orders placed
SQL> REM by the customer along with the order number(s)
SQL> 
SQL> DECLARE
  2  	 v_cust_name customer.cust_name%TYPE := '&name';
  3  	 v_start_date DATE := TO_DATE('&start_date', 'YYYY-MM-DD');
  4  	 v_end_date DATE := TO_DATE('&end_date', 'YYYY-MM-DD');
  5  
  6  	 v_order_count NUMBER;
  7  BEGIN
  8  	 SELECT COUNT(o.order_no)
  9  	 INTO v_order_count
 10  	 FROM customer c
 11  	 JOIN orders o ON c.cust_id = o.cust_id
 12  	 WHERE c.cust_name = v_cust_name
 13  	 AND o.order_date BETWEEN v_start_date AND v_end_date;
 14  
 15  	 IF v_order_count > 0 THEN
 16  	     DBMS_OUTPUT.PUT_LINE('Customer ' || v_cust_name || ' has placed ' || v_order_count || ' order(s) within the specified date range.');
 17  
 18  	     FOR order_rec IN (SELECT o.order_no
 19  			       FROM customer c
 20  			       JOIN orders o ON c.cust_id = o.cust_id
 21  			       WHERE c.cust_name = v_cust_name
 22  			       AND o.order_date BETWEEN v_start_date AND v_end_date) LOOP
 23  		 DBMS_OUTPUT.PUT_LINE('Order Number: ' || order_rec.order_no);
 24  	     END LOOP;
 25  	 ELSE
 26  	     DBMS_OUTPUT.PUT_LINE('Customer ' || v_cust_name || ' has not placed any orders within the specified date range.');
 27  	 END IF;
 28  END;
 29  /
Enter value for name: Hari
old   2:     v_cust_name customer.cust_name%TYPE := '&name';
new   2:     v_cust_name customer.cust_name%TYPE := 'Hari';
Enter value for start_date: 2015-01-01
old   3:     v_start_date DATE := TO_DATE('&start_date', 'YYYY-MM-DD');
new   3:     v_start_date DATE := TO_DATE('2015-01-01', 'YYYY-MM-DD');
Enter value for end_date: 2023-01-01
old   4:     v_end_date DATE := TO_DATE('&end_date', 'YYYY-MM-DD');
new   4:     v_end_date DATE := TO_DATE('2023-01-01', 'YYYY-MM-DD');
Customer Hari has placed 2 order(s) within the specified date range.            
Order Number: OP100                                                             
Order Number: OP500                                                             

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> REM Display the customer name along with the details of pizza type and its
SQL> REM quantity ordered for the given order number. Also find the total quantity
SQL> REM ordered for the given order number as shown below:
SQL> REM SQL> /
SQL> REM Enter value for oid: OP100
SQL> REM old 11: oid:='&oid';
SQL> REM new 11: oid:='OP100';
SQL> REM Customer name: Hari
SQL> REM Ordered Following Pizza
SQL> REM PIZZA TYPE QTY
SQL> REM Pan 3
SQL> REM Grilled 2
SQL> REM Italian 1
SQL> REM Spanish 5
SQL> REM --------------------
> REM Total Qty: 11
SQL> 
SQL> DECLARE
  2    oid VARCHAR2(10) := '&oid';
  3    cust_name VARCHAR2(50);
  4    total_qty NUMBER := 0;
  5  
  6  BEGIN
  7    SELECT C.cust_name INTO cust_name FROM CUSTOMER C
  8    JOIN ORDERS O ON O.cust_id=C.cust_id
  9    WHERE O.order_no= oid;
 10  
 11    DBMS_OUTPUT.PUT_LINE('Customer Name:'||cust_name);
 12  
 13    DBMS_OUTPUT.PUT_LINE('Ordered Following Pizza');
 14    DBMS_OUTPUT.PUT_LINE('PIZZA TYPE' || ' ' || 'QTY');
 15  
 16    FOR i IN (SELECT P.pizza_type,OL.qty FROM PIZZA P
 17  		 JOIN ORDER_LIST OL ON OL.pizza_id=P.pizza_id
 18  		 WHERE OL.order_no=oid)
 19  
 20    LOOP
 21  	 DBMS_OUTPUT.PUT_LINE(i.pizza_type || '    ' || i.qty);
 22  	 total_qty := total_qty + i.qty;
 23    END LOOP;
 24  
 25    DBMS_OUTPUT.PUT_LINE('--------------------');
 26    DBMS_OUTPUT.PUT_LINE('Total Qty: ' || total_qty);
 27  EXCEPTION
 28    WHEN NO_DATA_FOUND THEN
 29  	 DBMS_OUTPUT.PUT_LINE('Order ID ' || oid || ' not found.');
 30  END;
 31  /
Enter value for oid: OP100
old   2:   oid VARCHAR2(10) := '&oid';
new   2:   oid VARCHAR2(10) := 'OP100';
Customer Name:Hari                                                              
Ordered Following Pizza                                                         
PIZZA TYPE QTY                                                                  
pan    3                                                                        
grilled    2                                                                    
italian    2                                                                    
spanish    5                                                                    
supremo    4                                                                    
--------------------                                                            
Total Qty: 16                                                                   

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> REM Display the total number of orders that contains one pizza type, two pizza
SQL> REM type and so on.
SQL> REM Number of Orders that contains
SQL> REM Only ONE Pizza type 8
SQL> REM Two Pizza types 3
SQL> REM Three Pizza types 2
SQL> REM ALL Pizza types 1
SQL> 
SQL> 
SQL> DECLARE
  2  	 v_one_type_cnt NUMBER := 0;
  3  	 v_two_types_cnt NUMBER := 0;
  4  	 v_three_types_cnt NUMBER := 0;
  5  	 v_all_types_cnt NUMBER := 0;
  6  	 v_all NUMBER := 0;
  7  
  8  	 CURSOR order_cursor IS
  9  	     SELECT order_no, COUNT(DISTINCT pizza_id) AS pizza_types_count
 10  	     FROM order_list
 11  	     GROUP BY order_no;
 12  
 13  
 14  BEGIN
 15    SELECT COUNT(DISTINCT pizza_id) INTO v_all FROM pizza ;
 16  
 17  	 FOR order_rec IN order_cursor LOOP
 18  	     CASE order_rec.pizza_types_count
 19  		 WHEN 1 THEN
 20  		     v_one_type_cnt := v_one_type_cnt + 1;
 21  		 WHEN 2 THEN
 22  		     v_two_types_cnt := v_two_types_cnt + 1;
 23  		 WHEN 3 THEN
 24  		     v_three_types_cnt := v_three_types_cnt + 1;
 25  		 WHEN v_all THEN
 26  		     v_all_types_cnt := v_all_types_cnt + 1;
 27  	     END CASE;
 28  	 END LOOP;
 29  
 30  	 DBMS_OUTPUT.PUT_LINE('Number of Orders that contains');
 31  	 DBMS_OUTPUT.PUT_LINE('Only ONE Pizza type ' || v_one_type_cnt);
 32  	 DBMS_OUTPUT.PUT_LINE('Two Pizza types ' || v_two_types_cnt);
 33  	 DBMS_OUTPUT.PUT_LINE('Three Pizza types ' || v_three_types_cnt);
 34  	 DBMS_OUTPUT.PUT_LINE('ALL Pizza types ' || v_all_types_cnt);
 35  
 36  END;
 37  /
Number of Orders that contains                                                  
Only ONE Pizza type 1                                                           
Two Pizza types 3                                                               
Three Pizza types 1                                                             
ALL Pizza types 1                                                               

PL/SQL procedure successfully completed.

SQL> 
SQL> spool off
