SQL> ALTER TABLE orders ADD total_amt NUMBER;

Table altered.

SQL> @"E:\Sem 3 Lab\DBL\Ex6\Ex-06-DBL.sql"
SQL> SET SERVEROUTPUT ON;
SQL> SET ECHO ON;
SQL> 
SQL> REM ALTER TABLE ORDERS ADD total_amt NUMBER;
SQL> 
SQL> REM  Write a stored procedure to display the total number of pizza's ordered by
SQL> REM the given order number. (Use IN, OUT)
SQL> 
SQL> CREATE OR REPLACE PROCEDURE GetTotalPizzasOrdered(
  2  	 p_order_no IN ORDERS.order_no%TYPE,
  3  	 p_total_qty OUT NUMBER
  4  ) AS
  5  BEGIN
  6  	 SELECT NVL(SUM(ol.qty), 0)
  7  	 INTO p_total_qty
  8  	 FROM ORDERS o
  9  	 JOIN ORDER_LIST ol ON o.order_no = ol.order_no
 10  	 WHERE o.order_no = p_order_no;
 11  
 12  	 IF p_total_qty > 0 THEN
 13  	     DBMS_OUTPUT.PUT_LINE('Total number of pizzas ordered for Order ' || p_order_no || ': ' || p_total_qty);
 14  	 ELSE
 15  	     DBMS_OUTPUT.PUT_LINE('No pizzas ordered for Order ' || p_order_no);
 16  	 END IF;
 17  END;
 18  /

Procedure created.

SQL> 
SQL> DECLARE
  2  	 v_total_qty NUMBER;
  3  BEGIN
  4  	 GetTotalPizzasOrdered('&orderid', v_total_qty);
  5  END;
  6  /
Enter value for orderid: OP100
old   4:     GetTotalPizzasOrdered('&orderid', v_total_qty);
new   4:     GetTotalPizzasOrdered('OP100', v_total_qty);
Total number of pizzas ordered for Order OP100: 16                              

PL/SQL procedure successfully completed.

SQL> 
SQL> REM For the given order number, calculate the Discount as follows:
SQL> REM For total amount > 2000 and total amount < 5000: Discount=5%
SQL> REM For total amount > 5000 and total amount < 10000: Discount=10%
SQL> REM For total amount > 10000: Discount=20%
SQL> REM Calculate the total amount (after the discount) and update the same in
SQL> REM orders table.
SQL> 
SQL> CREATE OR REPLACE PROCEDURE CalculateDiscountAndPrintOrder(
  2  	 p_order_no IN ORDERS.order_no%TYPE
  3  ) AS
  4  	 v_total_amount NUMBER;
  5  	 v_discount_rate NUMBER;
  6  	 v_final_amount NUMBER;
  7  	 v_cust_name customer.cust_name%TYPE;
  8  	 v_order_date orders.order_date%TYPE;
  9  	 v_phone customer.phone%TYPE;
 10  	 v_cust_id customer.cust_id%TYPE;
 11  
 12  	 CURSOR order_cursor IS
 13  	     SELECT o.cust_id, o.order_date, c.cust_name, c.phone, SUM(ol.qty * p.unit_price) AS total_amount
 14  	     FROM orders o
 15  	     JOIN order_list ol ON o.order_no = ol.order_no
 16  	     JOIN pizza p ON ol.pizza_id = p.pizza_id
 17  	     JOIN customer c ON o.cust_id = c.cust_id
 18  	     WHERE o.order_no = p_order_no
 19  	     GROUP BY o.cust_id, o.order_date, c.cust_name, c.phone;
 20  
 21  BEGIN
 22  	 OPEN order_cursor;
 23  
 24  	 FETCH order_cursor INTO v_cust_id, v_order_date, v_cust_name, v_phone, v_total_amount;
 25  
 26  	 IF order_cursor%FOUND THEN
 27  	     -- Calculate discount
 28  	     IF v_total_amount > 2000 AND v_total_amount < 5000 THEN
 29  		 v_discount_rate := 0.05; -- 5%
 30  	     ELSIF v_total_amount >= 5000 AND v_total_amount < 10000 THEN
 31  		 v_discount_rate := 0.10; -- 10%
 32  	     ELSIF v_total_amount >= 10000 THEN
 33  		 v_discount_rate := 0.20; -- 20%
 34  	     ELSE
 35  		 v_discount_rate := 0; -- No discount
 36  	     END IF;
 37  
 38  	     -- Calculate final amount after discount
 39  	     v_final_amount := v_total_amount - (v_total_amount * v_discount_rate);
 40  
 41  	     -- Update the total amount in the ORDERS table
 42  	     UPDATE ORDERS
 43  	     SET total_amt = v_final_amount
 44  	     WHERE order_no = p_order_no;
 45  
 46  	     -- Print order details
 47  	     DBMS_OUTPUT.PUT_LINE('************************************************************');
 48  	     DBMS_OUTPUT.PUT_LINE('Order Number: ' || p_order_no || ' Customer Name: ' || v_cust_name);
 49  	     DBMS_OUTPUT.PUT_LINE('Order Date: ' || TO_CHAR(v_order_date, 'DD-Mon-YYYY') || ' Phone: ' || v_phone);
 50  	     DBMS_OUTPUT.PUT_LINE('************************************************************');
 51  
 52  	     DBMS_OUTPUT.PUT_LINE('SNo Pizza Type Qty Price Amount');
 53  
 54  	     FOR order_rec IN (SELECT ROWNUM AS sno, p.pizza_type, ol.qty, p.unit_price, (ol.qty * p.unit_price) AS amount
 55  			       FROM order_list ol
 56  			       JOIN pizza p ON ol.pizza_id = p.pizza_id
 57  			       WHERE ol.order_no = p_order_no) LOOP
 58  		 DBMS_OUTPUT.PUT_LINE(order_rec.sno || '. ' || order_rec.pizza_type || ' ' || order_rec.qty || ' ' ||
 59  				      order_rec.unit_price || ' ' || order_rec.amount);
 60  	     END LOOP;
 61  
 62  	     DBMS_OUTPUT.PUT_LINE('------------------------------------------------------');
 63  	     DBMS_OUTPUT.PUT_LINE('Total = ' || v_total_amount);
 64  	     DBMS_OUTPUT.PUT_LINE('------------------------------------------------------');
 65  	     DBMS_OUTPUT.PUT_LINE('Total Amount : Rs.' || v_total_amount);
 66  	     DBMS_OUTPUT.PUT_LINE('Discount (' || TO_CHAR(v_discount_rate * 100) || '%) : Rs.' || (v_total_amount * v_discount_rate));
 67  	     DBMS_OUTPUT.PUT_LINE('-------------------------- ----');
 68  	     DBMS_OUTPUT.PUT_LINE('Amount to be paid : Rs.' || v_final_amount);
 69  	     DBMS_OUTPUT.PUT_LINE('-------------------------- ----');
 70  	     DBMS_OUTPUT.PUT_LINE('Great Offers! Discount up to 25% on DIWALI Festival Day...');
 71  	     DBMS_OUTPUT.PUT_LINE('************************************************************');
 72  	 ELSE
 73  	     DBMS_OUTPUT.PUT_LINE('No order found for order number ' || p_order_no);
 74  	 END IF;
 75  
 76  	 CLOSE order_cursor;
 77  END;
 78  /

Procedure created.

SQL> 
SQL> DECLARE
  2  	 v_order_no orders.order_no%TYPE := '&orderno';
  3  BEGIN
  4  	 CalculateDiscountAndPrintOrder(v_order_no);
  5  END;
  6  /
Enter value for orderno: OP100
old   2:     v_order_no orders.order_no%TYPE := '&orderno';
new   2:     v_order_no orders.order_no%TYPE := 'OP100';
************************************************************                    
Order Number: OP100 Customer Name: Hari                                         
Order Date: 28-Jun-2015 Phone: 9001200031                                       
************************************************************                    
SNo Pizza Type Qty Price Amount                                                 
1. pan 3 130 390                                                                
2. grilled 2 230 460                                                            
3. italian 2 200 400                                                            
4. spanish 5 260 1300                                                           
5. supremo 4 250 1000                                                           
------------------------------------------------------                          
Total = 3550                                                                    
------------------------------------------------------                          
Total Amount : Rs.3550                                                          
Discount (5%) : Rs.177.5                                                        
-------------------------- ----                                                 
Amount to be paid : Rs.3372.5                                                   
-------------------------- ----                                                 
Great Offers! Discount up to 25% on DIWALI Festival Day...                      
************************************************************                    

PL/SQL procedure successfully completed.

SQL> 
SQL> 
SQL> REM Write a stored function to display the customer name who ordered
SQL> REM highest among the total number of pizzas for a given pizza type.
SQL> 
SQL> CREATE OR REPLACE FUNCTION GetCustomerWithHighestOrder(
  2  	 p_pizza_type IN PIZZA.pizza_type%TYPE
  3  ) RETURN CUSTOMER.cust_name%TYPE AS
  4  	 v_cust_name CUSTOMER.cust_name%TYPE;
  5  BEGIN
  6  	 SELECT c.cust_name
  7  	 INTO v_cust_name
  8  	 FROM customer c
  9  	 JOIN orders o ON c.cust_id = o.cust_id
 10  	 JOIN order_list ol ON o.order_no = ol.order_no
 11  	 JOIN pizza p ON ol.pizza_id = p.pizza_id
 12  	 WHERE p.pizza_type = p_pizza_type
 13  	 GROUP BY c.cust_name
 14  	 ORDER BY SUM(ol.qty) DESC
 15  	 FETCH FIRST 1 ROW ONLY;
 16  
 17  	 RETURN v_cust_name;
 18  END;
 19  /

Function created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE DisplayCustomerWithHighestOrder(
  2  	 p_pizza_type IN PIZZA.pizza_type%TYPE
  3  ) AS
  4  	 v_cust_name CUSTOMER.cust_name%TYPE;
  5  BEGIN
  6  	 v_cust_name := GetCustomerWithHighestOrder(p_pizza_type);
  7  
  8  	 IF v_cust_name IS NOT NULL THEN
  9  	     DBMS_OUTPUT.PUT_LINE('Customer who ordered the highest quantity of ' || p_pizza_type || ': ' || v_cust_name);
 10  	 ELSE
 11  	     DBMS_OUTPUT.PUT_LINE('No orders found for pizza type ' || p_pizza_type);
 12  	 END IF;
 13  END;
 14  /

Procedure created.

SQL> 
SQL> DECLARE
  2  	 v_pizza_type PIZZA.pizza_type%TYPE := '&type';
  3  BEGIN
  4  	 DisplayCustomerWithHighestOrder(v_pizza_type);
  5  END;
  6  /
Enter value for type: pan
old   2:     v_pizza_type PIZZA.pizza_type%TYPE := '&type';
new   2:     v_pizza_type PIZZA.pizza_type%TYPE := 'pan';
Customer who ordered the highest quantity of pan: Prasanth                      

PL/SQL procedure successfully completed.

SQL> 
SQL> REM Implement Question (2) using stored function to return the amount to be
SQL> REM paid and update the same, for the given order number.
SQL> 
SQL> CREATE OR REPLACE FUNCTION CalculateDiscountAndReturnAmount(
  2  	 p_order_no IN ORDERS.order_no%TYPE
  3  ) RETURN NUMBER AS
  4  	 v_total_amount NUMBER;
  5  	 v_discount_rate NUMBER;
  6  	 v_final_amount NUMBER;
  7  BEGIN
  8  	 SELECT total_amt
  9  	 INTO v_total_amount
 10  	 FROM ORDERS
 11  	 WHERE order_no = p_order_no;
 12  
 13  	 -- Calculate discount
 14  	 IF v_total_amount > 2000 AND v_total_amount < 5000 THEN
 15  	     v_discount_rate := 0.05; -- 5%
 16  	 ELSIF v_total_amount >= 5000 AND v_total_amount < 10000 THEN
 17  	     v_discount_rate := 0.10; -- 10%
 18  	 ELSIF v_total_amount >= 10000 THEN
 19  	     v_discount_rate := 0.20; -- 20%
 20  	 ELSE
 21  	     v_discount_rate := 0; -- No discount
 22  	 END IF;
 23  
 24  	 -- Calculate final amount after discount
 25  	 v_final_amount := v_total_amount - (v_total_amount * v_discount_rate);
 26  
 27  	 -- Update the total amount in the ORDERS table
 28  	 UPDATE ORDERS
 29  	 SET total_amt = v_final_amount
 30  	 WHERE order_no = p_order_no;
 31  
 32  	 RETURN v_final_amount;
 33  END;
 34  /

Function created.

SQL> 
SQL> CREATE OR REPLACE PROCEDURE DisplayOrderDetailsAndAmountToBePaid(
  2  	 p_order_no IN ORDERS.order_no%TYPE
  3  ) AS
  4  	 v_final_amount NUMBER;
  5  BEGIN
  6  	 v_final_amount := CalculateDiscountAndReturnAmount(p_order_no);
  7  
  8  	 IF v_final_amount IS NOT NULL THEN
  9  	     -- Display order details (you can reuse the display logic from the previous procedure)
 10  	     DBMS_OUTPUT.PUT_LINE('Order details can be displayed here if needed.');
 11  	     DBMS_OUTPUT.PUT_LINE('Amount to be paid for Order ' || p_order_no || ': Rs.' || v_final_amount);
 12  	     DBMS_OUTPUT.PUT_LINE('Order amount has been updated.');
 13  	 ELSE
 14  	     DBMS_OUTPUT.PUT_LINE('No order found for order number ' || p_order_no);
 15  	 END IF;
 16  END;
 17  /

Procedure created.

SQL> 
SQL> DECLARE
  2  	 v_order_no ORDERS.order_no%TYPE := '&opid'; -- Replace with the desired order number
  3  BEGIN
  4  	 DisplayOrderDetailsAndAmountToBePaid(v_order_no);
  5  END;
  6  /
Enter value for opid: OP100
old   2:     v_order_no ORDERS.order_no%TYPE := '&opid'; -- Replace with the desired order number
new   2:     v_order_no ORDERS.order_no%TYPE := 'OP100'; -- Replace with the desired order number
Order details can be displayed here if needed.                                  
Amount to be paid for Order OP100: Rs.3203.875                                  
Order amount has been updated.                                                  

PL/SQL procedure successfully completed.

SQL> spool off
